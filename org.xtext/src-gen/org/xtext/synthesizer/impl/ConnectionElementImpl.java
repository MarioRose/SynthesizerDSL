/**
 * generated by Xtext 2.12.0
 */
package org.xtext.synthesizer.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.xtext.synthesizer.ConnectionElement;
import org.xtext.synthesizer.ControlElement;
import org.xtext.synthesizer.SoundElement;
import org.xtext.synthesizer.SynthesizerPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Connection Element</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link org.xtext.synthesizer.impl.ConnectionElementImpl#getCe <em>Ce</em>}</li>
 *   <li>{@link org.xtext.synthesizer.impl.ConnectionElementImpl#getSe <em>Se</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ConnectionElementImpl extends MinimalEObjectImpl.Container implements ConnectionElement
{
  /**
   * The cached value of the '{@link #getCe() <em>Ce</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getCe()
   * @generated
   * @ordered
   */
  protected ControlElement ce;

  /**
   * The cached value of the '{@link #getSe() <em>Se</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getSe()
   * @generated
   * @ordered
   */
  protected SoundElement se;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ConnectionElementImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SynthesizerPackage.Literals.CONNECTION_ELEMENT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ControlElement getCe()
  {
    return ce;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetCe(ControlElement newCe, NotificationChain msgs)
  {
    ControlElement oldCe = ce;
    ce = newCe;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SynthesizerPackage.CONNECTION_ELEMENT__CE, oldCe, newCe);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setCe(ControlElement newCe)
  {
    if (newCe != ce)
    {
      NotificationChain msgs = null;
      if (ce != null)
        msgs = ((InternalEObject)ce).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SynthesizerPackage.CONNECTION_ELEMENT__CE, null, msgs);
      if (newCe != null)
        msgs = ((InternalEObject)newCe).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SynthesizerPackage.CONNECTION_ELEMENT__CE, null, msgs);
      msgs = basicSetCe(newCe, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SynthesizerPackage.CONNECTION_ELEMENT__CE, newCe, newCe));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SoundElement getSe()
  {
    return se;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetSe(SoundElement newSe, NotificationChain msgs)
  {
    SoundElement oldSe = se;
    se = newSe;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SynthesizerPackage.CONNECTION_ELEMENT__SE, oldSe, newSe);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setSe(SoundElement newSe)
  {
    if (newSe != se)
    {
      NotificationChain msgs = null;
      if (se != null)
        msgs = ((InternalEObject)se).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SynthesizerPackage.CONNECTION_ELEMENT__SE, null, msgs);
      if (newSe != null)
        msgs = ((InternalEObject)newSe).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SynthesizerPackage.CONNECTION_ELEMENT__SE, null, msgs);
      msgs = basicSetSe(newSe, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SynthesizerPackage.CONNECTION_ELEMENT__SE, newSe, newSe));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SynthesizerPackage.CONNECTION_ELEMENT__CE:
        return basicSetCe(null, msgs);
      case SynthesizerPackage.CONNECTION_ELEMENT__SE:
        return basicSetSe(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SynthesizerPackage.CONNECTION_ELEMENT__CE:
        return getCe();
      case SynthesizerPackage.CONNECTION_ELEMENT__SE:
        return getSe();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SynthesizerPackage.CONNECTION_ELEMENT__CE:
        setCe((ControlElement)newValue);
        return;
      case SynthesizerPackage.CONNECTION_ELEMENT__SE:
        setSe((SoundElement)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SynthesizerPackage.CONNECTION_ELEMENT__CE:
        setCe((ControlElement)null);
        return;
      case SynthesizerPackage.CONNECTION_ELEMENT__SE:
        setSe((SoundElement)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SynthesizerPackage.CONNECTION_ELEMENT__CE:
        return ce != null;
      case SynthesizerPackage.CONNECTION_ELEMENT__SE:
        return se != null;
    }
    return super.eIsSet(featureID);
  }

} //ConnectionElementImpl
