/**
 * generated by Xtext 2.12.0
 */
package org.xtext.synthesizer.util;

import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.util.Switch;

import org.xtext.synthesizer.*;

/**
 * <!-- begin-user-doc -->
 * The <b>Switch</b> for the model's inheritance hierarchy.
 * It supports the call {@link #doSwitch(EObject) doSwitch(object)}
 * to invoke the <code>caseXXX</code> method for each class of the model,
 * starting with the actual class of the object
 * and proceeding up the inheritance hierarchy
 * until a non-null result is returned,
 * which is the result of the switch.
 * <!-- end-user-doc -->
 * @see org.xtext.synthesizer.SynthesizerPackage
 * @generated
 */
public class SynthesizerSwitch<T> extends Switch<T>
{
  /**
   * The cached model package
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected static SynthesizerPackage modelPackage;

  /**
   * Creates an instance of the switch.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SynthesizerSwitch()
  {
    if (modelPackage == null)
    {
      modelPackage = SynthesizerPackage.eINSTANCE;
    }
  }

  /**
   * Checks whether this is a switch for the given package.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @param ePackage the package in question.
   * @return whether this is a switch for the given package.
   * @generated
   */
  @Override
  protected boolean isSwitchFor(EPackage ePackage)
  {
    return ePackage == modelPackage;
  }

  /**
   * Calls <code>caseXXX</code> for each class of the model until one returns a non null result; it yields that result.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @return the first non-null result returned by a <code>caseXXX</code> call.
   * @generated
   */
  @Override
  protected T doSwitch(int classifierID, EObject theEObject)
  {
    switch (classifierID)
    {
      case SynthesizerPackage.MODEL:
      {
        Model model = (Model)theEObject;
        T result = caseModel(model);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SynthesizerPackage.CONTROL_ELEMENT:
      {
        ControlElement controlElement = (ControlElement)theEObject;
        T result = caseControlElement(controlElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SynthesizerPackage.ROTARY_KNOB:
      {
        RotaryKnob rotaryKnob = (RotaryKnob)theEObject;
        T result = caseRotaryKnob(rotaryKnob);
        if (result == null) result = caseControlElement(rotaryKnob);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SynthesizerPackage.SLIDER:
      {
        Slider slider = (Slider)theEObject;
        T result = caseSlider(slider);
        if (result == null) result = caseControlElement(slider);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SynthesizerPackage.SOUND_ELEMENT:
      {
        SoundElement soundElement = (SoundElement)theEObject;
        T result = caseSoundElement(soundElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SynthesizerPackage.BUTTON:
      {
        Button button = (Button)theEObject;
        T result = caseButton(button);
        if (result == null) result = caseControlElement(button);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SynthesizerPackage.CONNECTION_ELEMENT:
      {
        ConnectionElement connectionElement = (ConnectionElement)theEObject;
        T result = caseConnectionElement(connectionElement);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SynthesizerPackage.SAW_TOOTH_OSCILLATOR:
      {
        SawToothOscillator sawToothOscillator = (SawToothOscillator)theEObject;
        T result = caseSawToothOscillator(sawToothOscillator);
        if (result == null) result = caseSoundElement(sawToothOscillator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SynthesizerPackage.SINE_OSCILLATOR:
      {
        SineOscillator sineOscillator = (SineOscillator)theEObject;
        T result = caseSineOscillator(sineOscillator);
        if (result == null) result = caseSoundElement(sineOscillator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SynthesizerPackage.TRIANGLE_OSCILLATOR:
      {
        TriangleOscillator triangleOscillator = (TriangleOscillator)theEObject;
        T result = caseTriangleOscillator(triangleOscillator);
        if (result == null) result = caseSoundElement(triangleOscillator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SynthesizerPackage.SQUARE_OSCILLATOR:
      {
        SquareOscillator squareOscillator = (SquareOscillator)theEObject;
        T result = caseSquareOscillator(squareOscillator);
        if (result == null) result = caseSoundElement(squareOscillator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SynthesizerPackage.PULSE_OSCILLATOR:
      {
        PulseOscillator pulseOscillator = (PulseOscillator)theEObject;
        T result = casePulseOscillator(pulseOscillator);
        if (result == null) result = caseSoundElement(pulseOscillator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      case SynthesizerPackage.IMPULSE_OSCILLATOR:
      {
        ImpulseOscillator impulseOscillator = (ImpulseOscillator)theEObject;
        T result = caseImpulseOscillator(impulseOscillator);
        if (result == null) result = caseSoundElement(impulseOscillator);
        if (result == null) result = defaultCase(theEObject);
        return result;
      }
      default: return defaultCase(theEObject);
    }
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Model</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Model</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseModel(Model object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Control Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Control Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseControlElement(ControlElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Rotary Knob</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Rotary Knob</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseRotaryKnob(RotaryKnob object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Slider</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Slider</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSlider(Slider object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sound Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sound Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSoundElement(SoundElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Button</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Button</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseButton(Button object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Connection Element</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Connection Element</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseConnectionElement(ConnectionElement object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Saw Tooth Oscillator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Saw Tooth Oscillator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSawToothOscillator(SawToothOscillator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Sine Oscillator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Sine Oscillator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSineOscillator(SineOscillator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Triangle Oscillator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Triangle Oscillator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseTriangleOscillator(TriangleOscillator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Square Oscillator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Square Oscillator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseSquareOscillator(SquareOscillator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Pulse Oscillator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Pulse Oscillator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T casePulseOscillator(PulseOscillator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>Impulse Oscillator</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>Impulse Oscillator</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject) doSwitch(EObject)
   * @generated
   */
  public T caseImpulseOscillator(ImpulseOscillator object)
  {
    return null;
  }

  /**
   * Returns the result of interpreting the object as an instance of '<em>EObject</em>'.
   * <!-- begin-user-doc -->
   * This implementation returns null;
   * returning a non-null result will terminate the switch, but this is the last case anyway.
   * <!-- end-user-doc -->
   * @param object the target of the switch.
   * @return the result of interpreting the object as an instance of '<em>EObject</em>'.
   * @see #doSwitch(org.eclipse.emf.ecore.EObject)
   * @generated
   */
  @Override
  public T defaultCase(EObject object)
  {
    return null;
  }

} //SynthesizerSwitch
