/*
 * generated by Xtext 2.12.0
 */
package org.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SynthesizerGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Synthesizer.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cControlsKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cControlsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cControlsControlElementParserRuleCall_2_0 = (RuleCall)cControlsAssignment_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cSoundKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cSoundsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cSoundsSoundElementParserRuleCall_4_2_0 = (RuleCall)cSoundsAssignment_4_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_3 = (Keyword)cGroup_4.eContents().get(3);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cConnectionsKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cLeftCurlyBracketKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cConnectionsAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final RuleCall cConnectionsConnectionElementParserRuleCall_5_2_0 = (RuleCall)cConnectionsAssignment_5_2.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_5_3 = (Keyword)cGroup_5.eContents().get(3);
		
		//Model:
		//	'Controls' '{' controls+=ControlElement* '}' ('Sound' '{' sounds+=SoundElement* '}')? ('Connections' '{'
		//	// should we really use this?????
		// connections+=ConnectionElement* '}')?;
		@Override public ParserRule getRule() { return rule; }
		
		//'Controls' '{' controls+=ControlElement* '}' ('Sound' '{' sounds+=SoundElement* '}')? ('Connections' '{'
		//// should we really use this?????
		// connections+=ConnectionElement* '}')?
		public Group getGroup() { return cGroup; }
		
		//'Controls'
		public Keyword getControlsKeyword_0() { return cControlsKeyword_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_1() { return cLeftCurlyBracketKeyword_1; }
		
		//controls+=ControlElement*
		public Assignment getControlsAssignment_2() { return cControlsAssignment_2; }
		
		//ControlElement
		public RuleCall getControlsControlElementParserRuleCall_2_0() { return cControlsControlElementParserRuleCall_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_3() { return cRightCurlyBracketKeyword_3; }
		
		//('Sound' '{' sounds+=SoundElement* '}')?
		public Group getGroup_4() { return cGroup_4; }
		
		//'Sound'
		public Keyword getSoundKeyword_4_0() { return cSoundKeyword_4_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_4_1() { return cLeftCurlyBracketKeyword_4_1; }
		
		//sounds+=SoundElement*
		public Assignment getSoundsAssignment_4_2() { return cSoundsAssignment_4_2; }
		
		//SoundElement
		public RuleCall getSoundsSoundElementParserRuleCall_4_2_0() { return cSoundsSoundElementParserRuleCall_4_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_4_3() { return cRightCurlyBracketKeyword_4_3; }
		
		//('Connections' '{' // should we really use this?????
		// connections+=ConnectionElement* '}')?
		public Group getGroup_5() { return cGroup_5; }
		
		//'Connections'
		public Keyword getConnectionsKeyword_5_0() { return cConnectionsKeyword_5_0; }
		
		//'{'
		public Keyword getLeftCurlyBracketKeyword_5_1() { return cLeftCurlyBracketKeyword_5_1; }
		
		//// should we really use this?????
		// connections+=ConnectionElement*
		public Assignment getConnectionsAssignment_5_2() { return cConnectionsAssignment_5_2; }
		
		//ConnectionElement
		public RuleCall getConnectionsConnectionElementParserRuleCall_5_2_0() { return cConnectionsConnectionElementParserRuleCall_5_2_0; }
		
		//'}'
		public Keyword getRightCurlyBracketKeyword_5_3() { return cRightCurlyBracketKeyword_5_3; }
	}
	public class ControlElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Synthesizer.ControlElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cButtonParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cRotaryKnobParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cSliderParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ControlElement:
		//	Button | RotaryKnob | Slider;
		@Override public ParserRule getRule() { return rule; }
		
		//Button | RotaryKnob | Slider
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Button
		public RuleCall getButtonParserRuleCall_0() { return cButtonParserRuleCall_0; }
		
		//RotaryKnob
		public RuleCall getRotaryKnobParserRuleCall_1() { return cRotaryKnobParserRuleCall_1; }
		
		//Slider
		public RuleCall getSliderParserRuleCall_2() { return cSliderParserRuleCall_2; }
	}
	public class RotaryKnobElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Synthesizer.RotaryKnob");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRotaryKnobKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cXKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cXAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cXINTTerminalRuleCall_4_0 = (RuleCall)cXAssignment_4.eContents().get(0);
		private final Keyword cYKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cYAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cYINTTerminalRuleCall_6_0 = (RuleCall)cYAssignment_6.eContents().get(0);
		private final Keyword cWidthKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cWidthAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cWidthINTTerminalRuleCall_8_0 = (RuleCall)cWidthAssignment_8.eContents().get(0);
		private final Keyword cHeightKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cHeightAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cHeightINTTerminalRuleCall_10_0 = (RuleCall)cHeightAssignment_10.eContents().get(0);
		private final Keyword cSoundKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cSoundAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final CrossReference cSoundSoundElementCrossReference_12_0 = (CrossReference)cSoundAssignment_12.eContents().get(0);
		private final RuleCall cSoundSoundElementIDTerminalRuleCall_12_0_1 = (RuleCall)cSoundSoundElementCrossReference_12_0.eContents().get(1);
		private final Keyword cEffectKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cTypeAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cTypeEffectParserRuleCall_14_0 = (RuleCall)cTypeAssignment_14.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//RotaryKnob:
		//	'rotaryKnob' name=ID '(' 'x' x=INT 'y' y=INT 'width' width=INT 'height' height=INT 'sound' sound=[SoundElement]
		//	'effect' type=Effect ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'rotaryKnob' name=ID '(' 'x' x=INT 'y' y=INT 'width' width=INT 'height' height=INT 'sound' sound=[SoundElement] 'effect'
		//type=Effect ')'
		public Group getGroup() { return cGroup; }
		
		//'rotaryKnob'
		public Keyword getRotaryKnobKeyword_0() { return cRotaryKnobKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'x'
		public Keyword getXKeyword_3() { return cXKeyword_3; }
		
		//x=INT
		public Assignment getXAssignment_4() { return cXAssignment_4; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_4_0() { return cXINTTerminalRuleCall_4_0; }
		
		//'y'
		public Keyword getYKeyword_5() { return cYKeyword_5; }
		
		//y=INT
		public Assignment getYAssignment_6() { return cYAssignment_6; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_6_0() { return cYINTTerminalRuleCall_6_0; }
		
		//'width'
		public Keyword getWidthKeyword_7() { return cWidthKeyword_7; }
		
		//width=INT
		public Assignment getWidthAssignment_8() { return cWidthAssignment_8; }
		
		//INT
		public RuleCall getWidthINTTerminalRuleCall_8_0() { return cWidthINTTerminalRuleCall_8_0; }
		
		//'height'
		public Keyword getHeightKeyword_9() { return cHeightKeyword_9; }
		
		//height=INT
		public Assignment getHeightAssignment_10() { return cHeightAssignment_10; }
		
		//INT
		public RuleCall getHeightINTTerminalRuleCall_10_0() { return cHeightINTTerminalRuleCall_10_0; }
		
		//'sound'
		public Keyword getSoundKeyword_11() { return cSoundKeyword_11; }
		
		//sound=[SoundElement]
		public Assignment getSoundAssignment_12() { return cSoundAssignment_12; }
		
		//[SoundElement]
		public CrossReference getSoundSoundElementCrossReference_12_0() { return cSoundSoundElementCrossReference_12_0; }
		
		//ID
		public RuleCall getSoundSoundElementIDTerminalRuleCall_12_0_1() { return cSoundSoundElementIDTerminalRuleCall_12_0_1; }
		
		//'effect'
		public Keyword getEffectKeyword_13() { return cEffectKeyword_13; }
		
		//type=Effect
		public Assignment getTypeAssignment_14() { return cTypeAssignment_14; }
		
		//Effect
		public RuleCall getTypeEffectParserRuleCall_14_0() { return cTypeEffectParserRuleCall_14_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_15() { return cRightParenthesisKeyword_15; }
	}
	public class SliderElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Synthesizer.Slider");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSliderKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cXKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cXAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cXINTTerminalRuleCall_4_0 = (RuleCall)cXAssignment_4.eContents().get(0);
		private final Keyword cYKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cYAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cYINTTerminalRuleCall_6_0 = (RuleCall)cYAssignment_6.eContents().get(0);
		private final Keyword cWidthKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cWidthAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cWidthINTTerminalRuleCall_8_0 = (RuleCall)cWidthAssignment_8.eContents().get(0);
		private final Keyword cHeightKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cHeightAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cHeightINTTerminalRuleCall_10_0 = (RuleCall)cHeightAssignment_10.eContents().get(0);
		private final Keyword cSoundKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cSoundAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final CrossReference cSoundSoundElementCrossReference_12_0 = (CrossReference)cSoundAssignment_12.eContents().get(0);
		private final RuleCall cSoundSoundElementIDTerminalRuleCall_12_0_1 = (RuleCall)cSoundSoundElementCrossReference_12_0.eContents().get(1);
		private final Keyword cEffectKeyword_13 = (Keyword)cGroup.eContents().get(13);
		private final Assignment cTypeAssignment_14 = (Assignment)cGroup.eContents().get(14);
		private final RuleCall cTypeEffectParserRuleCall_14_0 = (RuleCall)cTypeAssignment_14.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_15 = (Keyword)cGroup.eContents().get(15);
		
		//Slider:
		//	'slider' name=ID '(' 'x' x=INT 'y' y=INT 'width' width=INT 'height' height=INT 'sound' sound=[SoundElement] 'effect'
		//	type=Effect ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'slider' name=ID '(' 'x' x=INT 'y' y=INT 'width' width=INT 'height' height=INT 'sound' sound=[SoundElement] 'effect'
		//type=Effect ')'
		public Group getGroup() { return cGroup; }
		
		//'slider'
		public Keyword getSliderKeyword_0() { return cSliderKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'x'
		public Keyword getXKeyword_3() { return cXKeyword_3; }
		
		//x=INT
		public Assignment getXAssignment_4() { return cXAssignment_4; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_4_0() { return cXINTTerminalRuleCall_4_0; }
		
		//'y'
		public Keyword getYKeyword_5() { return cYKeyword_5; }
		
		//y=INT
		public Assignment getYAssignment_6() { return cYAssignment_6; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_6_0() { return cYINTTerminalRuleCall_6_0; }
		
		//'width'
		public Keyword getWidthKeyword_7() { return cWidthKeyword_7; }
		
		//width=INT
		public Assignment getWidthAssignment_8() { return cWidthAssignment_8; }
		
		//INT
		public RuleCall getWidthINTTerminalRuleCall_8_0() { return cWidthINTTerminalRuleCall_8_0; }
		
		//'height'
		public Keyword getHeightKeyword_9() { return cHeightKeyword_9; }
		
		//height=INT
		public Assignment getHeightAssignment_10() { return cHeightAssignment_10; }
		
		//INT
		public RuleCall getHeightINTTerminalRuleCall_10_0() { return cHeightINTTerminalRuleCall_10_0; }
		
		//'sound'
		public Keyword getSoundKeyword_11() { return cSoundKeyword_11; }
		
		//sound=[SoundElement]
		public Assignment getSoundAssignment_12() { return cSoundAssignment_12; }
		
		//[SoundElement]
		public CrossReference getSoundSoundElementCrossReference_12_0() { return cSoundSoundElementCrossReference_12_0; }
		
		//ID
		public RuleCall getSoundSoundElementIDTerminalRuleCall_12_0_1() { return cSoundSoundElementIDTerminalRuleCall_12_0_1; }
		
		//'effect'
		public Keyword getEffectKeyword_13() { return cEffectKeyword_13; }
		
		//type=Effect
		public Assignment getTypeAssignment_14() { return cTypeAssignment_14; }
		
		//Effect
		public RuleCall getTypeEffectParserRuleCall_14_0() { return cTypeEffectParserRuleCall_14_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_15() { return cRightParenthesisKeyword_15; }
	}
	public class EffectElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Synthesizer.Effect");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Keyword cFrequencyKeyword_0 = (Keyword)cAlternatives.eContents().get(0);
		private final Keyword cAmplitudeKeyword_1 = (Keyword)cAlternatives.eContents().get(1);
		
		//Effect:
		//	'frequency' | 'amplitude';
		@Override public ParserRule getRule() { return rule; }
		
		//'frequency' | 'amplitude'
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//'frequency'
		public Keyword getFrequencyKeyword_0() { return cFrequencyKeyword_0; }
		
		//'amplitude'
		public Keyword getAmplitudeKeyword_1() { return cAmplitudeKeyword_1; }
	}
	public class SoundElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Synthesizer.SoundElement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSawToothOscillatorParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSineOscillatorParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTriangleOscillatorParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cSquareOscillatorParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cPulseOscillatorParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		private final RuleCall cImpulseOscillatorParserRuleCall_5 = (RuleCall)cAlternatives.eContents().get(5);
		
		//SoundElement:
		//	SawToothOscillator | SineOscillator | TriangleOscillator | SquareOscillator | PulseOscillator | ImpulseOscillator;
		@Override public ParserRule getRule() { return rule; }
		
		//SawToothOscillator | SineOscillator | TriangleOscillator | SquareOscillator | PulseOscillator | ImpulseOscillator
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SawToothOscillator
		public RuleCall getSawToothOscillatorParserRuleCall_0() { return cSawToothOscillatorParserRuleCall_0; }
		
		//SineOscillator
		public RuleCall getSineOscillatorParserRuleCall_1() { return cSineOscillatorParserRuleCall_1; }
		
		//TriangleOscillator
		public RuleCall getTriangleOscillatorParserRuleCall_2() { return cTriangleOscillatorParserRuleCall_2; }
		
		//SquareOscillator
		public RuleCall getSquareOscillatorParserRuleCall_3() { return cSquareOscillatorParserRuleCall_3; }
		
		//PulseOscillator
		public RuleCall getPulseOscillatorParserRuleCall_4() { return cPulseOscillatorParserRuleCall_4; }
		
		//ImpulseOscillator
		public RuleCall getImpulseOscillatorParserRuleCall_5() { return cImpulseOscillatorParserRuleCall_5; }
	}
	public class ButtonElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Synthesizer.Button");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cButtonKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cXKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cXAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cXINTTerminalRuleCall_4_0 = (RuleCall)cXAssignment_4.eContents().get(0);
		private final Keyword cYKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cYAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cYINTTerminalRuleCall_6_0 = (RuleCall)cYAssignment_6.eContents().get(0);
		private final Keyword cWidthKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Assignment cWidthAssignment_8 = (Assignment)cGroup.eContents().get(8);
		private final RuleCall cWidthINTTerminalRuleCall_8_0 = (RuleCall)cWidthAssignment_8.eContents().get(0);
		private final Keyword cHeightKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Assignment cHeightAssignment_10 = (Assignment)cGroup.eContents().get(10);
		private final RuleCall cHeightINTTerminalRuleCall_10_0 = (RuleCall)cHeightAssignment_10.eContents().get(0);
		private final Keyword cSoundKeyword_11 = (Keyword)cGroup.eContents().get(11);
		private final Assignment cSoundAssignment_12 = (Assignment)cGroup.eContents().get(12);
		private final CrossReference cSoundSoundElementCrossReference_12_0 = (CrossReference)cSoundAssignment_12.eContents().get(0);
		private final RuleCall cSoundSoundElementIDTerminalRuleCall_12_0_1 = (RuleCall)cSoundSoundElementCrossReference_12_0.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_13 = (Keyword)cGroup.eContents().get(13);
		
		//Button:
		//	'button' name=ID '(' 'x' x=INT 'y' y=INT 'width' width=INT 'height' height=INT 'sound' sound=[SoundElement] ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'button' name=ID '(' 'x' x=INT 'y' y=INT 'width' width=INT 'height' height=INT 'sound' sound=[SoundElement] ')'
		public Group getGroup() { return cGroup; }
		
		//'button'
		public Keyword getButtonKeyword_0() { return cButtonKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'x'
		public Keyword getXKeyword_3() { return cXKeyword_3; }
		
		//x=INT
		public Assignment getXAssignment_4() { return cXAssignment_4; }
		
		//INT
		public RuleCall getXINTTerminalRuleCall_4_0() { return cXINTTerminalRuleCall_4_0; }
		
		//'y'
		public Keyword getYKeyword_5() { return cYKeyword_5; }
		
		//y=INT
		public Assignment getYAssignment_6() { return cYAssignment_6; }
		
		//INT
		public RuleCall getYINTTerminalRuleCall_6_0() { return cYINTTerminalRuleCall_6_0; }
		
		//'width'
		public Keyword getWidthKeyword_7() { return cWidthKeyword_7; }
		
		//width=INT
		public Assignment getWidthAssignment_8() { return cWidthAssignment_8; }
		
		//INT
		public RuleCall getWidthINTTerminalRuleCall_8_0() { return cWidthINTTerminalRuleCall_8_0; }
		
		//'height'
		public Keyword getHeightKeyword_9() { return cHeightKeyword_9; }
		
		//height=INT
		public Assignment getHeightAssignment_10() { return cHeightAssignment_10; }
		
		//INT
		public RuleCall getHeightINTTerminalRuleCall_10_0() { return cHeightINTTerminalRuleCall_10_0; }
		
		//'sound'
		public Keyword getSoundKeyword_11() { return cSoundKeyword_11; }
		
		//sound=[SoundElement]
		public Assignment getSoundAssignment_12() { return cSoundAssignment_12; }
		
		//[SoundElement]
		public CrossReference getSoundSoundElementCrossReference_12_0() { return cSoundSoundElementCrossReference_12_0; }
		
		//ID
		public RuleCall getSoundSoundElementIDTerminalRuleCall_12_0_1() { return cSoundSoundElementIDTerminalRuleCall_12_0_1; }
		
		//')'
		public Keyword getRightParenthesisKeyword_13() { return cRightParenthesisKeyword_13; }
	}
	public class ConnectionElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Synthesizer.ConnectionElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLinearKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cCeControlElementCrossReference_1_0 = (CrossReference)cCeAssignment_1.eContents().get(0);
		private final RuleCall cCeControlElementIDTerminalRuleCall_1_0_1 = (RuleCall)cCeControlElementCrossReference_1_0.eContents().get(1);
		private final Assignment cSeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cSeSoundElementCrossReference_2_0 = (CrossReference)cSeAssignment_2.eContents().get(0);
		private final RuleCall cSeSoundElementIDTerminalRuleCall_2_0_1 = (RuleCall)cSeSoundElementCrossReference_2_0.eContents().get(1);
		
		//ConnectionElement:
		//	'linear' ce=[ControlElement] se=[SoundElement];
		@Override public ParserRule getRule() { return rule; }
		
		//'linear' ce=[ControlElement] se=[SoundElement]
		public Group getGroup() { return cGroup; }
		
		//'linear'
		public Keyword getLinearKeyword_0() { return cLinearKeyword_0; }
		
		//ce=[ControlElement]
		public Assignment getCeAssignment_1() { return cCeAssignment_1; }
		
		//[ControlElement]
		public CrossReference getCeControlElementCrossReference_1_0() { return cCeControlElementCrossReference_1_0; }
		
		//ID
		public RuleCall getCeControlElementIDTerminalRuleCall_1_0_1() { return cCeControlElementIDTerminalRuleCall_1_0_1; }
		
		//se=[SoundElement]
		public Assignment getSeAssignment_2() { return cSeAssignment_2; }
		
		//[SoundElement]
		public CrossReference getSeSoundElementCrossReference_2_0() { return cSeSoundElementCrossReference_2_0; }
		
		//ID
		public RuleCall getSeSoundElementIDTerminalRuleCall_2_0_1() { return cSeSoundElementIDTerminalRuleCall_2_0_1; }
	}
	public class SawToothOscillatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Synthesizer.SawToothOscillator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSawToothOscillatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFrequencyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFrequencyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFrequencyINTTerminalRuleCall_4_0 = (RuleCall)cFrequencyAssignment_4.eContents().get(0);
		private final Keyword cAmplitudeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAmplitudeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAmplitudeINTTerminalRuleCall_6_0 = (RuleCall)cAmplitudeAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SawToothOscillator:
		//	'sawToothOscillator' name=ID '(' 'frequency' frequency=INT 'amplitude' amplitude=INT
		//	//should be float or INT.INT (e.g. 0.6)
		// ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'sawToothOscillator' name=ID '(' 'frequency' frequency=INT 'amplitude' amplitude=INT
		////should be float or INT.INT (e.g. 0.6)
		// ')'
		public Group getGroup() { return cGroup; }
		
		//'sawToothOscillator'
		public Keyword getSawToothOscillatorKeyword_0() { return cSawToothOscillatorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'frequency'
		public Keyword getFrequencyKeyword_3() { return cFrequencyKeyword_3; }
		
		//frequency=INT
		public Assignment getFrequencyAssignment_4() { return cFrequencyAssignment_4; }
		
		//INT
		public RuleCall getFrequencyINTTerminalRuleCall_4_0() { return cFrequencyINTTerminalRuleCall_4_0; }
		
		//'amplitude'
		public Keyword getAmplitudeKeyword_5() { return cAmplitudeKeyword_5; }
		
		//amplitude=INT
		public Assignment getAmplitudeAssignment_6() { return cAmplitudeAssignment_6; }
		
		//INT
		public RuleCall getAmplitudeINTTerminalRuleCall_6_0() { return cAmplitudeINTTerminalRuleCall_6_0; }
		
		////should be float or INT.INT (e.g. 0.6)
		// ')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class SineOscillatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Synthesizer.SineOscillator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSineOscillatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFrequencyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFrequencyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFrequencyINTTerminalRuleCall_4_0 = (RuleCall)cFrequencyAssignment_4.eContents().get(0);
		private final Keyword cAmplitudeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAmplitudeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAmplitudeINTTerminalRuleCall_6_0 = (RuleCall)cAmplitudeAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SineOscillator:
		//	'sineOscillator' name=ID '(' 'frequency' frequency=INT 'amplitude' amplitude=INT
		//	//should be float or INT.INT (e.g. 0.6)
		// ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'sineOscillator' name=ID '(' 'frequency' frequency=INT 'amplitude' amplitude=INT
		////should be float or INT.INT (e.g. 0.6)
		// ')'
		public Group getGroup() { return cGroup; }
		
		//'sineOscillator'
		public Keyword getSineOscillatorKeyword_0() { return cSineOscillatorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'frequency'
		public Keyword getFrequencyKeyword_3() { return cFrequencyKeyword_3; }
		
		//frequency=INT
		public Assignment getFrequencyAssignment_4() { return cFrequencyAssignment_4; }
		
		//INT
		public RuleCall getFrequencyINTTerminalRuleCall_4_0() { return cFrequencyINTTerminalRuleCall_4_0; }
		
		//'amplitude'
		public Keyword getAmplitudeKeyword_5() { return cAmplitudeKeyword_5; }
		
		//amplitude=INT
		public Assignment getAmplitudeAssignment_6() { return cAmplitudeAssignment_6; }
		
		//INT
		public RuleCall getAmplitudeINTTerminalRuleCall_6_0() { return cAmplitudeINTTerminalRuleCall_6_0; }
		
		////should be float or INT.INT (e.g. 0.6)
		// ')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class TriangleOscillatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Synthesizer.TriangleOscillator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTriangleOscillatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFrequencyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFrequencyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFrequencyINTTerminalRuleCall_4_0 = (RuleCall)cFrequencyAssignment_4.eContents().get(0);
		private final Keyword cAmplitudeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAmplitudeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAmplitudeINTTerminalRuleCall_6_0 = (RuleCall)cAmplitudeAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//TriangleOscillator:
		//	'triangleOscillator' name=ID '(' 'frequency' frequency=INT 'amplitude' amplitude=INT
		//	//should be float or INT.INT (e.g. 0.6)
		// ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'triangleOscillator' name=ID '(' 'frequency' frequency=INT 'amplitude' amplitude=INT
		////should be float or INT.INT (e.g. 0.6)
		// ')'
		public Group getGroup() { return cGroup; }
		
		//'triangleOscillator'
		public Keyword getTriangleOscillatorKeyword_0() { return cTriangleOscillatorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'frequency'
		public Keyword getFrequencyKeyword_3() { return cFrequencyKeyword_3; }
		
		//frequency=INT
		public Assignment getFrequencyAssignment_4() { return cFrequencyAssignment_4; }
		
		//INT
		public RuleCall getFrequencyINTTerminalRuleCall_4_0() { return cFrequencyINTTerminalRuleCall_4_0; }
		
		//'amplitude'
		public Keyword getAmplitudeKeyword_5() { return cAmplitudeKeyword_5; }
		
		//amplitude=INT
		public Assignment getAmplitudeAssignment_6() { return cAmplitudeAssignment_6; }
		
		//INT
		public RuleCall getAmplitudeINTTerminalRuleCall_6_0() { return cAmplitudeINTTerminalRuleCall_6_0; }
		
		////should be float or INT.INT (e.g. 0.6)
		// ')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class SquareOscillatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Synthesizer.SquareOscillator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSquareOscillatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFrequencyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFrequencyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFrequencyINTTerminalRuleCall_4_0 = (RuleCall)cFrequencyAssignment_4.eContents().get(0);
		private final Keyword cAmplitudeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAmplitudeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAmplitudeINTTerminalRuleCall_6_0 = (RuleCall)cAmplitudeAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//SquareOscillator:
		//	'squareOscillator' name=ID '(' 'frequency' frequency=INT 'amplitude' amplitude=INT
		//	//should be float or INT.INT (e.g. 0.6)
		// ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'squareOscillator' name=ID '(' 'frequency' frequency=INT 'amplitude' amplitude=INT
		////should be float or INT.INT (e.g. 0.6)
		// ')'
		public Group getGroup() { return cGroup; }
		
		//'squareOscillator'
		public Keyword getSquareOscillatorKeyword_0() { return cSquareOscillatorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'frequency'
		public Keyword getFrequencyKeyword_3() { return cFrequencyKeyword_3; }
		
		//frequency=INT
		public Assignment getFrequencyAssignment_4() { return cFrequencyAssignment_4; }
		
		//INT
		public RuleCall getFrequencyINTTerminalRuleCall_4_0() { return cFrequencyINTTerminalRuleCall_4_0; }
		
		//'amplitude'
		public Keyword getAmplitudeKeyword_5() { return cAmplitudeKeyword_5; }
		
		//amplitude=INT
		public Assignment getAmplitudeAssignment_6() { return cAmplitudeAssignment_6; }
		
		//INT
		public RuleCall getAmplitudeINTTerminalRuleCall_6_0() { return cAmplitudeINTTerminalRuleCall_6_0; }
		
		////should be float or INT.INT (e.g. 0.6)
		// ')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class PulseOscillatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Synthesizer.PulseOscillator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPulseOscillatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFrequencyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFrequencyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFrequencyINTTerminalRuleCall_4_0 = (RuleCall)cFrequencyAssignment_4.eContents().get(0);
		private final Keyword cAmplitudeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAmplitudeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAmplitudeINTTerminalRuleCall_6_0 = (RuleCall)cAmplitudeAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//PulseOscillator:
		//	'pulseOscillator' name=ID '(' 'frequency' frequency=INT 'amplitude' amplitude=INT
		//	//should be float or INT.INT (e.g. 0.6)
		// ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'pulseOscillator' name=ID '(' 'frequency' frequency=INT 'amplitude' amplitude=INT
		////should be float or INT.INT (e.g. 0.6)
		// ')'
		public Group getGroup() { return cGroup; }
		
		//'pulseOscillator'
		public Keyword getPulseOscillatorKeyword_0() { return cPulseOscillatorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'frequency'
		public Keyword getFrequencyKeyword_3() { return cFrequencyKeyword_3; }
		
		//frequency=INT
		public Assignment getFrequencyAssignment_4() { return cFrequencyAssignment_4; }
		
		//INT
		public RuleCall getFrequencyINTTerminalRuleCall_4_0() { return cFrequencyINTTerminalRuleCall_4_0; }
		
		//'amplitude'
		public Keyword getAmplitudeKeyword_5() { return cAmplitudeKeyword_5; }
		
		//amplitude=INT
		public Assignment getAmplitudeAssignment_6() { return cAmplitudeAssignment_6; }
		
		//INT
		public RuleCall getAmplitudeINTTerminalRuleCall_6_0() { return cAmplitudeINTTerminalRuleCall_6_0; }
		
		////should be float or INT.INT (e.g. 0.6)
		// ')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	public class ImpulseOscillatorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.xtext.Synthesizer.ImpulseOscillator");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImpulseOscillatorKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cFrequencyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cFrequencyAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cFrequencyINTTerminalRuleCall_4_0 = (RuleCall)cFrequencyAssignment_4.eContents().get(0);
		private final Keyword cAmplitudeKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cAmplitudeAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final RuleCall cAmplitudeINTTerminalRuleCall_6_0 = (RuleCall)cAmplitudeAssignment_6.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//ImpulseOscillator:
		//	'impulseOscillator' name=ID '(' 'frequency' frequency=INT 'amplitude' amplitude=INT
		//	//should be float or INT.INT (e.g. 0.6)
		// ')';
		@Override public ParserRule getRule() { return rule; }
		
		//'impulseOscillator' name=ID '(' 'frequency' frequency=INT 'amplitude' amplitude=INT
		////should be float or INT.INT (e.g. 0.6)
		// ')'
		public Group getGroup() { return cGroup; }
		
		//'impulseOscillator'
		public Keyword getImpulseOscillatorKeyword_0() { return cImpulseOscillatorKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'frequency'
		public Keyword getFrequencyKeyword_3() { return cFrequencyKeyword_3; }
		
		//frequency=INT
		public Assignment getFrequencyAssignment_4() { return cFrequencyAssignment_4; }
		
		//INT
		public RuleCall getFrequencyINTTerminalRuleCall_4_0() { return cFrequencyINTTerminalRuleCall_4_0; }
		
		//'amplitude'
		public Keyword getAmplitudeKeyword_5() { return cAmplitudeKeyword_5; }
		
		//amplitude=INT
		public Assignment getAmplitudeAssignment_6() { return cAmplitudeAssignment_6; }
		
		//INT
		public RuleCall getAmplitudeINTTerminalRuleCall_6_0() { return cAmplitudeINTTerminalRuleCall_6_0; }
		
		////should be float or INT.INT (e.g. 0.6)
		// ')'
		public Keyword getRightParenthesisKeyword_7() { return cRightParenthesisKeyword_7; }
	}
	
	
	private final ModelElements pModel;
	private final ControlElementElements pControlElement;
	private final RotaryKnobElements pRotaryKnob;
	private final SliderElements pSlider;
	private final EffectElements pEffect;
	private final SoundElementElements pSoundElement;
	private final ButtonElements pButton;
	private final ConnectionElementElements pConnectionElement;
	private final SawToothOscillatorElements pSawToothOscillator;
	private final SineOscillatorElements pSineOscillator;
	private final TriangleOscillatorElements pTriangleOscillator;
	private final SquareOscillatorElements pSquareOscillator;
	private final PulseOscillatorElements pPulseOscillator;
	private final ImpulseOscillatorElements pImpulseOscillator;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SynthesizerGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pControlElement = new ControlElementElements();
		this.pRotaryKnob = new RotaryKnobElements();
		this.pSlider = new SliderElements();
		this.pEffect = new EffectElements();
		this.pSoundElement = new SoundElementElements();
		this.pButton = new ButtonElements();
		this.pConnectionElement = new ConnectionElementElements();
		this.pSawToothOscillator = new SawToothOscillatorElements();
		this.pSineOscillator = new SineOscillatorElements();
		this.pTriangleOscillator = new TriangleOscillatorElements();
		this.pSquareOscillator = new SquareOscillatorElements();
		this.pPulseOscillator = new PulseOscillatorElements();
		this.pImpulseOscillator = new ImpulseOscillatorElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.xtext.Synthesizer".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	'Controls' '{' controls+=ControlElement* '}' ('Sound' '{' sounds+=SoundElement* '}')? ('Connections' '{'
	//	// should we really use this?????
	// connections+=ConnectionElement* '}')?;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//ControlElement:
	//	Button | RotaryKnob | Slider;
	public ControlElementElements getControlElementAccess() {
		return pControlElement;
	}
	
	public ParserRule getControlElementRule() {
		return getControlElementAccess().getRule();
	}
	
	//RotaryKnob:
	//	'rotaryKnob' name=ID '(' 'x' x=INT 'y' y=INT 'width' width=INT 'height' height=INT 'sound' sound=[SoundElement]
	//	'effect' type=Effect ')';
	public RotaryKnobElements getRotaryKnobAccess() {
		return pRotaryKnob;
	}
	
	public ParserRule getRotaryKnobRule() {
		return getRotaryKnobAccess().getRule();
	}
	
	//Slider:
	//	'slider' name=ID '(' 'x' x=INT 'y' y=INT 'width' width=INT 'height' height=INT 'sound' sound=[SoundElement] 'effect'
	//	type=Effect ')';
	public SliderElements getSliderAccess() {
		return pSlider;
	}
	
	public ParserRule getSliderRule() {
		return getSliderAccess().getRule();
	}
	
	//Effect:
	//	'frequency' | 'amplitude';
	public EffectElements getEffectAccess() {
		return pEffect;
	}
	
	public ParserRule getEffectRule() {
		return getEffectAccess().getRule();
	}
	
	//SoundElement:
	//	SawToothOscillator | SineOscillator | TriangleOscillator | SquareOscillator | PulseOscillator | ImpulseOscillator;
	public SoundElementElements getSoundElementAccess() {
		return pSoundElement;
	}
	
	public ParserRule getSoundElementRule() {
		return getSoundElementAccess().getRule();
	}
	
	//Button:
	//	'button' name=ID '(' 'x' x=INT 'y' y=INT 'width' width=INT 'height' height=INT 'sound' sound=[SoundElement] ')';
	public ButtonElements getButtonAccess() {
		return pButton;
	}
	
	public ParserRule getButtonRule() {
		return getButtonAccess().getRule();
	}
	
	//ConnectionElement:
	//	'linear' ce=[ControlElement] se=[SoundElement];
	public ConnectionElementElements getConnectionElementAccess() {
		return pConnectionElement;
	}
	
	public ParserRule getConnectionElementRule() {
		return getConnectionElementAccess().getRule();
	}
	
	//SawToothOscillator:
	//	'sawToothOscillator' name=ID '(' 'frequency' frequency=INT 'amplitude' amplitude=INT
	//	//should be float or INT.INT (e.g. 0.6)
	// ')';
	public SawToothOscillatorElements getSawToothOscillatorAccess() {
		return pSawToothOscillator;
	}
	
	public ParserRule getSawToothOscillatorRule() {
		return getSawToothOscillatorAccess().getRule();
	}
	
	//SineOscillator:
	//	'sineOscillator' name=ID '(' 'frequency' frequency=INT 'amplitude' amplitude=INT
	//	//should be float or INT.INT (e.g. 0.6)
	// ')';
	public SineOscillatorElements getSineOscillatorAccess() {
		return pSineOscillator;
	}
	
	public ParserRule getSineOscillatorRule() {
		return getSineOscillatorAccess().getRule();
	}
	
	//TriangleOscillator:
	//	'triangleOscillator' name=ID '(' 'frequency' frequency=INT 'amplitude' amplitude=INT
	//	//should be float or INT.INT (e.g. 0.6)
	// ')';
	public TriangleOscillatorElements getTriangleOscillatorAccess() {
		return pTriangleOscillator;
	}
	
	public ParserRule getTriangleOscillatorRule() {
		return getTriangleOscillatorAccess().getRule();
	}
	
	//SquareOscillator:
	//	'squareOscillator' name=ID '(' 'frequency' frequency=INT 'amplitude' amplitude=INT
	//	//should be float or INT.INT (e.g. 0.6)
	// ')';
	public SquareOscillatorElements getSquareOscillatorAccess() {
		return pSquareOscillator;
	}
	
	public ParserRule getSquareOscillatorRule() {
		return getSquareOscillatorAccess().getRule();
	}
	
	//PulseOscillator:
	//	'pulseOscillator' name=ID '(' 'frequency' frequency=INT 'amplitude' amplitude=INT
	//	//should be float or INT.INT (e.g. 0.6)
	// ')';
	public PulseOscillatorElements getPulseOscillatorAccess() {
		return pPulseOscillator;
	}
	
	public ParserRule getPulseOscillatorRule() {
		return getPulseOscillatorAccess().getRule();
	}
	
	//ImpulseOscillator:
	//	'impulseOscillator' name=ID '(' 'frequency' frequency=INT 'amplitude' amplitude=INT
	//	//should be float or INT.INT (e.g. 0.6)
	// ')';
	public ImpulseOscillatorElements getImpulseOscillatorAccess() {
		return pImpulseOscillator;
	}
	
	public ParserRule getImpulseOscillatorRule() {
		return getImpulseOscillatorAccess().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
