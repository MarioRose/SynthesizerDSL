/**
 * generated by Xtext 2.12.0
 */
package org.xtext.generator;

import com.google.common.collect.Iterators;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.xtext.synthesizer.Button;
import org.xtext.synthesizer.RotaryKnob;
import org.xtext.synthesizer.SineOscillator;
import org.xtext.synthesizer.Slider;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SynthesizerGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    String _generateUI = this.generateUI(resource);
    String _plus = ("\r\n\t\timport java.io.BufferedReader;\r\n\t\timport java.io.IOException;\r\n\t\timport java.io.InputStreamReader;\r\n\t\timport java.util.Scanner; \r\n\t\timport java.awt.event.ActionEvent;\r\n\t\timport java.awt.event.ActionListener;\r\n\t\timport java.awt.BorderLayout;\r\n\t\timport java.awt.GridLayout;\r\n\t\timport java.awt.Dimension;\r\n\r\n\t\timport javax.swing.*;  \r\n\t\timport javax.swing.JApplet;\r\n\t\timport com.jsyn.swing.JAppletFrame;\r\n\t\timport com.jsyn.swing.DoubleBoundedRangeSlider;\r\n\t\timport com.jsyn.swing.PortControllerFactory;\r\n\r\n\t\timport com.jsyn.swing.ExponentialRangeModel;\r\n\t\timport com.jsyn.swing.PortModelFactory;\r\n\t\timport com.jsyn.swing.RotaryTextController;\r\n\r\n\t\timport com.jsyn.JSyn;\r\n\t\timport com.jsyn.Synthesizer;\r\n\t\timport com.jsyn.unitgen.LineOut;\r\n\t\timport com.jsyn.unitgen.SineOscillator;\r\n\t\timport com.jsyn.unitgen.UnitOscillator;\r\n\t\timport com.jsyn.unitgen.LinearRamp;\r\n\t\timport com.jsyn.unitgen.SawtoothOscillatorBL;\r\n\r\n\r\n\t\tpublic class SynthesizerDSL extends JApplet{\r\n\t\t\tstatic boolean soundRunning;\r\n\t\t    static Synthesizer synth;\r\n\r\n\t\t\t" + _generateUI);
    String _plus_1 = (_plus + "\r\n\r\n\t\t    @Override\r\n\t\t    public void start() {\r\n\t\t    \tcreateAndShowGUI();\r\n\t\t\t}\r\n\t\t\t\r\n\r\n\t\t\t//Create Sound (SineOscillators)\r\n\t\t\t");
    final Function1<SineOscillator, String> _function = (SineOscillator it) -> {
      String _name = it.getName();
      String _plus_2 = ("private static void createSound" + _name);
      String _plus_3 = (_plus_2 + "() {\n\t\t\t\t");
      String _plus_4 = (_plus_3 + 
        "if (!soundRunning) {\r\n\t\t\t\t\tUnitOscillator osc;\r\n\t\t            LineOut lineOut;\r\n\t\t        \t\r\n\t\t        \t// Create a context for the synthesizer.\r\n\t\t            synth = JSyn.createSynthesizer();\r\n\t\t\r\n\t\t            // Start synthesizer using default stereo output at 44100 Hz.\r\n\t\t            synth.start();\r\n\t\t\r\n\t\t            // Add a tone generator.\r\n\t\t            synth.add(osc = new SineOscillator());\r\n\t\t            // Add a stereo audio output unit.\r\n\t\t            synth.add(lineOut = new LineOut());\r\n\t\t\r\n\t\t            // Connect the oscillator to both channels of the output.\r\n\t\t            osc.output.connect(0, lineOut.input, 0);\r\n\t\t            osc.output.connect(0, lineOut.input, 1);\r\n\t\t\r\n\t\t            // Set the frequency and amplitude for the sine wave.\r\n\t\t            osc.frequency.set(");
      int _frequency = it.getFrequency();
      String _plus_5 = (_plus_4 + Integer.valueOf(_frequency));
      String _plus_6 = (_plus_5 + ");\r\n\t\t            osc.amplitude.set(");
      int _amplitude = it.getAmplitude();
      String _plus_7 = (_plus_6 + Integer.valueOf(_amplitude));
      return (_plus_7 + ");\r\n\t\t\r\n\t\t            // We only need to start the LineOut. It will pull data from the\r\n\t\t            // oscillator.\r\n\t\t            lineOut.start();\r\n\t            }\r\n\t            else\r\n\t            \tsynth.stop();\r\n\t            \r\n\t            soundRunning = !soundRunning;\r\n\t\t\t}\r\n\t        ");
    };
    String _join = IteratorExtensions.join(IteratorExtensions.<SineOscillator, String>map(Iterators.<SineOscillator>filter(resource.getAllContents(), SineOscillator.class), _function), "\n\t\t\t\t");
    String _plus_2 = (_plus_1 + _join);
    String _plus_3 = (_plus_2 + "\r\n\r\n\t\t\tpublic static void main(String[] args) {\r\n\t\t\t\tSystem.out.println(\"Synthesizer started!\");\r\n\t\t        SynthesizerDSL applet = new SynthesizerDSL();\r\n\t\t        JAppletFrame frame = new JAppletFrame(\"Synthesizer\", applet);\r\n\t\t        frame.setSize(640, 500);\r\n\t\t        frame.setVisible(true);\r\n\t\t        frame.test();\r\n\t\t        frame.validate();\r\n\t\t\t}\r\n\t\t}");
    fsa.generateFile("SynthesizerDSL.java", _plus_3);
  }
  
  public String generateUI(final Resource resource) {
    final Function1<Button, String> _function = (Button it) -> {
      String _name = it.getName();
      String _plus = ("JButton b" + _name);
      String _plus_1 = (_plus + " = new JButton(\"b");
      String _name_1 = it.getName();
      String _plus_2 = (_plus_1 + _name_1);
      String _plus_3 = (_plus_2 + "\");\n\r\n\t\t\t\tb");
      String _name_2 = it.getName();
      String _plus_4 = (_plus_3 + _name_2);
      String _plus_5 = (_plus_4 + ".addActionListener(new ActionListener() {\r\n\t\t\t        @Override\r\n\t\t\t        public void actionPerformed(ActionEvent e) {\r\n\t\t\t            createSound");
      String _name_3 = it.getSound().getName();
      String _plus_6 = (_plus_5 + _name_3);
      String _plus_7 = (_plus_6 + "();\r\n\t\t\t        }\r\n\t\t    \t});\r\n\r\n\t\t\t\tb");
      String _name_4 = it.getName();
      String _plus_8 = (_plus_7 + _name_4);
      String _plus_9 = (_plus_8 + ".setBounds(");
      int _x = it.getX();
      String _plus_10 = (_plus_9 + Integer.valueOf(_x));
      String _plus_11 = (_plus_10 + ", ");
      int _y = it.getY();
      String _plus_12 = (_plus_11 + Integer.valueOf(_y));
      String _plus_13 = (_plus_12 + ", ");
      int _width = it.getWidth();
      String _plus_14 = (_plus_13 + Integer.valueOf(_width));
      String _plus_15 = (_plus_14 + ", ");
      int _height = it.getHeight();
      String _plus_16 = (_plus_15 + Integer.valueOf(_height));
      String _plus_17 = (_plus_16 + ");  // x, y, width, height\r\n    \t\t\tb");
      String _name_5 = it.getName();
      String _plus_18 = (_plus_17 + _name_5);
      String _plus_19 = (_plus_18 + ".setPreferredSize(new Dimension(");
      int _width_1 = it.getWidth();
      String _plus_20 = (_plus_19 + Integer.valueOf(_width_1));
      String _plus_21 = (_plus_20 + ", ");
      int _height_1 = it.getHeight();
      String _plus_22 = (_plus_21 + Integer.valueOf(_height_1));
      String _plus_23 = (_plus_22 + "));\t\t\t\t\r\n        \t\tpanel.add(b");
      String _name_6 = it.getName();
      String _plus_24 = (_plus_23 + _name_6);
      return (_plus_24 + ");\r\n\r\n\t\t        ");
    };
    String _join = IteratorExtensions.join(IteratorExtensions.<Button, String>map(Iterators.<Button>filter(resource.getAllContents(), Button.class), _function), "\n\t\t\t\t");
    String _plus = ("private void createAndShowGUI() {\r\n\t\t        //Create and set up the window.\r\n        \t\tadd(BorderLayout.NORTH, new JLabel(\"Show Oscillators in an AudioScope\"));\r\n\t\t        \r\n\t\t\t\t//Create Panels\r\n\t\t\t\tJPanel panel = new JPanel();\r\n        \t\tpanel.setLayout(null);\r\n        \t\tadd(BorderLayout.CENTER, panel);\r\n\r\n\t\t        //Create Buttons\r\n\t\t\t\t" + _join);
    String _plus_1 = (_plus + "\r\n\r\n\t\t\t\t//Example ramp for slider\r\n\t\t       \tLinearRamp freqRamp = new LinearRamp();\r\n\t\t        freqRamp.input.setup(50.0, 300.0, 20000.0);\r\n\t\t        freqRamp.input.setName(\"Frequency\");\r\n\t\t\t\tfreqRamp.time.set(0.1);\r\n\r\n\t\t        //Create Slider\r\n\t\t\t\t");
    final Function1<Slider, String> _function_1 = (Slider it) -> {
      String _name = it.getName();
      String _plus_2 = ("DoubleBoundedRangeSlider slider" + _name);
      String _plus_3 = (_plus_2 + " = PortControllerFactory.createExponentialPortSlider(freqRamp.input);\r\n\t\t\t\tslider");
      String _name_1 = it.getName();
      String _plus_4 = (_plus_3 + _name_1);
      String _plus_5 = (_plus_4 + ".setBounds(");
      int _x = it.getX();
      String _plus_6 = (_plus_5 + Integer.valueOf(_x));
      String _plus_7 = (_plus_6 + ", ");
      int _y = it.getY();
      String _plus_8 = (_plus_7 + Integer.valueOf(_y));
      String _plus_9 = (_plus_8 + ", ");
      int _width = it.getWidth();
      String _plus_10 = (_plus_9 + Integer.valueOf(_width));
      String _plus_11 = (_plus_10 + ", ");
      int _height = it.getHeight();
      String _plus_12 = (_plus_11 + Integer.valueOf(_height));
      String _plus_13 = (_plus_12 + ");  // x, y, width, height\r\n\t\t\t\tpanel.add(slider");
      String _name_2 = it.getName();
      String _plus_14 = (_plus_13 + _name_2);
      return (_plus_14 + ");");
    };
    String _join_1 = IteratorExtensions.join(IteratorExtensions.<Slider, String>map(Iterators.<Slider>filter(resource.getAllContents(), Slider.class), _function_1), "\n\t\t\t\t");
    String _plus_2 = (_plus_1 + _join_1);
    String _plus_3 = (_plus_2 + "\r\n\r\n\r\n\t\t\t\t//Example input for knobs\r\n\t\t        Synthesizer synth = JSyn.createSynthesizer();\r\n\r\n\t\t        // Add a tone generator. (band limited sawtooth)\r\n\t\t        SawtoothOscillatorBL osc;\r\n\t\t        synth.add(osc = new SawtoothOscillatorBL());\r\n\t\t        // Add a lag to smooth out amplitude changes and avoid pops.\r\n\t\t        LinearRamp lag;\r\n\t\t        synth.add(lag = new LinearRamp());\r\n\t\t        // Add an output mixer.\r\n\t\t        LineOut lineOut;\r\n\t\t        synth.add(lineOut = new LineOut());\r\n\r\n\t\t        // Connect the oscillator to both left and right output.\r\n\t\t        osc.output.connect(0, lineOut.input, 0);\r\n\t\t        osc.output.connect(0, lineOut.input, 1);\r\n\t\t\r\n\t\t        // Set the minimum, current and maximum values for the port.\r\n\t\t        lag.output.connect(osc.amplitude);\r\n\t\t        lag.input.setup(0.0, 0.5, 1.0);\r\n\t\t        lag.time.set(0.2);\r\n\r\n        \t\tExponentialRangeModel amplitudeModel = PortModelFactory.createExponentialModel(lag.input);\r\n\r\n\t\t        //Create RotaryKnob\r\n\t\t\t\t");
    final Function1<RotaryKnob, String> _function_2 = (RotaryKnob it) -> {
      String _name = it.getName();
      String _plus_4 = ("RotaryTextController knob" + _name);
      String _plus_5 = (_plus_4 + " = new RotaryTextController(amplitudeModel, 10);\r\n\t\t\t\tknob");
      String _name_1 = it.getName();
      String _plus_6 = (_plus_5 + _name_1);
      String _plus_7 = (_plus_6 + ".setBounds(");
      int _x = it.getX();
      String _plus_8 = (_plus_7 + Integer.valueOf(_x));
      String _plus_9 = (_plus_8 + ", ");
      int _y = it.getY();
      String _plus_10 = (_plus_9 + Integer.valueOf(_y));
      String _plus_11 = (_plus_10 + ", ");
      int _width = it.getWidth();
      String _plus_12 = (_plus_11 + Integer.valueOf(_width));
      String _plus_13 = (_plus_12 + ", ");
      int _height = it.getHeight();
      String _plus_14 = (_plus_13 + Integer.valueOf(_height));
      String _plus_15 = (_plus_14 + ");  // x, y, width, height\r\n\t\t\t\tpanel.add(knob");
      String _name_2 = it.getName();
      String _plus_16 = (_plus_15 + _name_2);
      return (_plus_16 + ");");
    };
    String _join_2 = IteratorExtensions.join(IteratorExtensions.<RotaryKnob, String>map(Iterators.<RotaryKnob>filter(resource.getAllContents(), RotaryKnob.class), _function_2), "\n\t\t\t\t");
    String _plus_4 = (_plus_3 + _join_2);
    return (_plus_4 + "\r\n\t\t\t}");
  }
}
